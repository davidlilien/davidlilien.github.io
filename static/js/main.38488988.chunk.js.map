{"version":3,"sources":["index.tsx"],"names":["MAX","anim","loop","reverse","from","y","to","mass","Box1","props","mesh","useRef","useSpring","onChange","param","current","position","value","ref","args","color","wireframe","processPoints","points","max","result","Float32Array","i","j","indexBase","pointX","pointZ","deltaX","Math","abs","deltaZ","Box3","buffer","useState","useMemo","undefined","attributes","needsUpdate","useEffect","setAttribute","THREE","attach","side","Camera","virtualCamera","React","state","useFrame","makeDefault","name","cos","PI","sin","fov","enableRotate","camera","Test","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38488988.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { useMemo, useRef, useState } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport './index.css';\nimport { OrbitControls, PerspectiveCamera } from '@react-three/drei';\nimport { useEffect } from 'react';\nimport _ from 'lodash';\nimport { useSpring,  } from '@react-spring/three';\n\nconst height = 5;\nconst MAX = 100;\n\nconst anim = {\n  loop: { reverse: true },\n  from: {\n    y: -height,\n  },\n  to: {\n    y: height,\n  },\n  mass: 10\n}\n\nfunction Box1(props: JSX.IntrinsicElements['mesh']) {\n  const mesh = useRef<THREE.Mesh>(null!)\n  useSpring({ \n    ...anim,\n    // reverse: true,\n    onChange: (param) => mesh.current.position.y = param.value.y\n\n});\n\n  \n\n  // useFrame((state, delta) => {(mesh.current.rotation.x += 0.01)})\n  return (\n    <mesh\n      ref={mesh}\n    >\n      <sphereGeometry args={[2,12,12]} />\n      <meshStandardMaterial color=\"#5050FF\" wireframe={true} />\n    </mesh>\n  )\n}\n\n\n\n\n\nconst processPoints = (points: Float32Array | undefined, value: number) => {\n  const max = MAX;\n  let result = points ? points : new Float32Array(max*max*18);\n  // let result = new Float32Array(/*max*max*3*6*/18*max*max);\n  \n  //const unit = 1;\n  /*if (!points) {\n    console.log('plouf')\n    for (let i=0; i<max; i++) {\n      for (let j=0; j<max; j++) {\n        result.push(new THREE.Vector3(i, 0, j))\n        result.push(new THREE.Vector3(i, 0, j+unit))\n        result.push(new THREE.Vector3(i+unit, 0, j))\n        result.push(new THREE.Vector3(i+unit, 0, j))\n        result.push(new THREE.Vector3(i+unit, 0, j+unit))\n        result.push(new THREE.Vector3(i, 0, j+unit))\n      }\n    }\n  }*/\n\n  if (!points) {\n    for (let i=0; i<max; i++) {\n      for (let j=0; j<max; j++) {\n        const indexBase = (i*18*max + j*18);\n    \n        // Triagnle 1\n        result[indexBase+0] = i;\n        result[indexBase+1] = 0;\n        result[indexBase+2] = j;\n        result[indexBase+3] = i;\n        result[indexBase+4] = 0;\n        result[indexBase+5] = j+1;\n        result[indexBase+6] = i+1;\n        result[indexBase+7] = 0;\n        result[indexBase+8] = j;\n        \n        // Triangle 2\n        result[indexBase+9] = i+1;\n        result[indexBase+10] = 0;\n        result[indexBase+11] = j;\n        result[indexBase+12] = i+1;\n        result[indexBase+13] = 0;\n        result[indexBase+14] = j+1;\n        result[indexBase+15] = i;\n        result[indexBase+16] = 0;\n        result[indexBase+17] = j+1;\n    \n    \n          \n          /*\n          //.push(new THREE.Vector3(i, 0, j))\n          /*result.push(new THREE.Vector3(i, 0, j+unit))\n          result.push(new THREE.Vector3(i+unit, 0, j))\n          result.push(new THREE.Vector3(i+unit, 0, j))\n          result.push(new THREE.Vector3(i+unit, 0, j+unit))\n          result.push(new THREE.Vector3(i, 0, j+unit))*/\n       }\n      }\n  }\n  \n\n\n  const propagation = MAX/2;\n\n  \n\n  const x = MAX/2;\n  const z = MAX/2;\n\n  let p = 0;\n  for (let i=0; i< 18*max*max; i+=3) {\n   \n    const pointX = result[i+0];\n    const pointY = result[i+1];\n    const pointZ = result[i+2];\n    const deltaX = Math.abs(pointX - x);\n    const deltaZ = Math.abs(pointZ - z);\n\n    if (pointX === x && pointZ === z) {\n      result[i+1] = value\n    }\n    else if (deltaX < propagation && deltaZ < propagation) {\n      result[i+1] = value / Math.max(deltaX, deltaZ);\n    }  \n  \n   \n\n\n  }\n\n\n  return result;\n}\n\n\n\nfunction Box3(props: JSX.IntrinsicElements['mesh']) {\n  const mesh = useRef<THREE.Mesh>(null!)\n  const buffer = useRef<THREE.BufferGeometry>(null!)\n  const [value, setValue] = useState(height);\n  const [test, setTest] = useState(2);\n  const points = useMemo(() => processPoints(undefined, height), []);\n\n\n  useSpring({ \n    ...anim,\n    onChange: (param) => { processPoints(points, param.value.y); buffer.current.attributes.position.needsUpdate = true; } \n  });\n\n  useEffect(() => {\n    buffer.current.setAttribute('position', new THREE.BufferAttribute(processPoints(points, value), 3));\n  }, [\n    \n  ])\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n    >\n      <bufferGeometry attach=\"geometry\" ref={buffer}/>\n      <meshStandardMaterial color=\"#A0A0A0\" wireframe={true} side={THREE.DoubleSide} />\n    </mesh>\n  )\n}\n\nconst Camera = () =>{ const virtualCamera = React.useRef<THREE.Camera>()\n  const [state, setState] = useState(0)\n  useFrame(() => {\n    // setState((state+0.1) % 360)\n  })\n\n return (<><PerspectiveCamera makeDefault name=\"FBO Camera\" ref={virtualCamera} position={[Math.cos(state * Math.PI / 180)*10, 3, Math.sin(state * Math.PI / 180)*10]} fov={120}></PerspectiveCamera>\n<OrbitControls enableRotate={true} camera={virtualCamera.current} /></>)}\n\nconst Test = () => { \n  return (<Canvas>\n    <ambientLight />\n    <Box1 position={[0, 0, 0]} />\n    <Box3 position={[-(MAX/2), 0, -(MAX/2)]}  />\n    <Camera />\n   \n  </Canvas>)\n}\n\nReactDOM.render(\n  <Test />,\n  document.getElementById('root')\n)"],"sourceRoot":""}